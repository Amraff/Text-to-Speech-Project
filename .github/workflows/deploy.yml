name: Deploy infra & lambdas

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Python (for zipping; optional)
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create deploy directory & zip lambdas
        run: |
          mkdir -p deploy
          zip -j deploy/new_post.zip lambda/handler.py
          zip -j deploy/convert_to_audio.zip lambda/convert_to_audio.py
          zip -j deploy/get_post.zip lambda/get_post.py
          ls -lh deploy

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        working-directory: terraform
        run: |
          if [ -n "${{ secrets.TFSTATE_BUCKET }}" ]; then
            terraform init -input=false \
              -backend-config="bucket=${{ secrets.TFSTATE_BUCKET }}" \
              -backend-config="key=polly-app/terraform.tfstate" \
              -backend-config="region=${{ secrets.AWS_REGION }}" \
              -backend-config="dynamodb_table=${{ secrets.TFSTATE_LOCK_TABLE }}"
          else
            terraform init -input=false
          fi

      - name: Terraform Format & Validate
        working-directory: terraform
        run: |
          terraform fmt -check
          terraform validate

      # ðŸ‘‡ Auto-import step: ensures existing resources are tracked instead of failing
      - name: Terraform Import existing resources
        if: github.event.inputs.action == 'deploy' || github.event_name == 'push'
        working-directory: terraform
        run: |
          # DynamoDB
          terraform import aws_dynamodb_table.posts polly-posts-karim-new || true

          # IAM Roles
          terraform import aws_iam_role.lambda_new_post_role lambda-new-post-role-karim-new || true
          terraform import aws_iam_role.lambda_convert_role lambda-convert-role-karim-new || true
          terraform import aws_iam_role.lambda_get_role lambda-get-role-karim-new || true

          # S3 Bucket
          terraform import aws_s3_bucket.mp3_bucket text2speech-karim-new-1234 || true

          # Lambda Functions
          terraform import aws_lambda_function.new_post polly-new-post-karim-new || true
          terraform import aws_lambda_function.convert_to_audio polly-convert-audio-karim-new || true
          terraform import aws_lambda_function.get_post polly-get-post-karim-new || true

      - name: Terraform Apply
        if: github.event.inputs.action == 'deploy' || github.event_name == 'push'
        working-directory: terraform
        env:
          TF_LOG: DEBUG   # enable detailed debug logging
        run: terraform apply -auto-approve -input=false
        timeout-minutes: 15   # stop if stuck more than 15 mins

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: terraform
        run: terraform destroy -auto-approve -input=false
        env:
          TF_LOG: DEBUG
        timeout-minutes: 15
